@model LibraryManagementSystem.Data.Entities.Book

@{
    ViewData["Title"] = "AddNewBook";
}
@*@if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
{
    <div id="successAlert" class="alert alert-success" style="width:600px;margin-left:800px;">
        @ViewBag.SuccessMessage
    </div>

    <script>
        setTimeout(function () {
            $("#successAlert").alert('close');
        }, 10000);
    </script>
}*@
@*@if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
{
    <div id="successAlert" class="alert alert-success" style="width:600px;margin-left:800px;">
        @TempData["SuccessMessage"]
    </div>

    <script>
        setTimeout(function () {
            $("#successAlert").alert('close');
        }, 10000);
    </script>
}*@

<!-- Include the message partial view -->
@Html.Partial("_MessagePartial")


<div class="container" style="height:auto;">
    <div class="row justify-content-center">
        <div class="col-md-8" style="height: 599px;">
            <h2 class="text-center">Add New Book</h2>
            <form asp-action="AddNewBook" method="post" id="AddBook" class="needs-validation" novalidate style="margin-left: 75px;margin-right: -900px;">

                <div class="form-group col-md-5 mb-3">
                    <label asp-for="BookName">Name</label>
                    <input asp-for="BookName" class="form-control" required />
                    <div class="invalid-feedback">Please enter the book name.</div>
                    <div class="valid-feedback">Looks good!</div>
                </div>

                <div class="form-group col-md-5 mb-3">
                    <label asp-for="AuthorName">Author Name</label>
                    <input asp-for="AuthorName" class="form-control" required />
                    <div class="invalid-feedback">Please enter the author name.</div>
                    <div class="valid-feedback">Looks good!</div>
                </div>

                <div class="form-group col-md-5 mb-3">
                    <label asp-for="Publishing">Publisher</label>
                    <input asp-for="Publishing" class="form-control" required />
                    <div class="invalid-feedback">Please enter the publisher.</div>
                    <div class="valid-feedback">Looks good!</div>
                </div>

                <div class="form-group col-md-5 mb-3">
                    <label asp-for="Price">Price</label>
                    <input asp-for="Price" class="form-control" type="number" step="0.01" required />
                    <div class="invalid-feedback">Please enter a valid price.</div>
                    <div class="valid-feedback">Looks good!</div>
                </div>

                <div class="form-group col-md-5 mb-3">
                    <label asp-for="Subject">Category</label>
                    <select asp-for="Subject" class="form-control" id="SelectedRateBookType" required>
                        <option value="">Select a category</option>
                        <!-- Options will be dynamically added here -->
                    </select>
                    <div class="invalid-feedback">Please select a category.</div>
                    <div class="valid-feedback">Looks good!</div>
                </div>

                @*This is for the Semeste DropDown*@
                @*<div class="form-group col-md-5 mb-3">
                    <label asp-for="Semester">Semester</label>
                    <select asp-for="Semester" class="form-control" id="SelecteSemester" required>
                        <option value="">Select a category</option>
                        <!-- Options will be dynamically added here -->
                    </select>
                    <div class="invalid-feedback">Please select a Sem.</div>
                    <div class="valid-feedback">Looks good!</div>
                </div>*@

                <div class="form-group col-12">
                    <button type="button" class="btn btn-primary" data-toggle="modal" onclick="validateAndShowModal()">Save</button>
                    <a asp-action="AddNewBook" class="btn btn-secondary" onclick="resetForm()">Cancel</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Confirm Save</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to save the Book?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModal()">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveChanges()">Save Book Details</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            debugger;
            // Make AJAX call to fetch data
            $.ajax({
                url: '/Books/BookCategories',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    // Clear previous options
                    $('#SelectedRateBookType').empty();

                    // Add default option
                    $('#SelectedRateBookType').append($('<option>', {
                        value: '',
                        text: 'Select a category'
                    }));

                    // Add options based on fetched data
                    $.each(data, function (index, category) {
                        $('#SelectedRateBookType').append($('<option>', {
                            value: category.bookCategoryId,
                            text: category.subject
                        }));
                    });
                },
                error: function (xhr, textStatus, errorThrown) {
                    //console.log('Error:', errorThrown);
                }
            });
            GetAllSemestersData

            ////For Semester DropDown
            //$.ajax({
            //    url: '/Books/GetAllSemestersData',
            //    type: 'GET',
            //    dataType: 'json',
            //    success: function (data) {
            //        // Clear previous options
            //        $('#SelecteSemester').empty();

            //        // Add default option
            //        $('#SelecteSemester').append($('<option>', {
            //            value: '',
            //            text: 'Select a Semester'
            //        }));

            //        // Add options based on fetched data
            //        $.each(data, function (index, Sem) {
            //            $('#SelecteSemester').append($('<option>', {
            //                value: Sem.semesterId,
            //                text: Sem.semesterName
            //            }));
            //        });
            //    },
            //    error: function (xhr, textStatus, errorThrown) {
            //        console.log('Error:', errorThrown);
            //    }
            //});
        });

        function validateAndShowModal() {
            debugger;
            var form = document.getElementById("AddBook");

            if (form.checkValidity()) {
                // If the form is valid, show the modal
                $('#exampleModalCenter').modal('show');
            } else {
                // If the form is not valid, trigger the validation feedback
                form.classList.add('was-validated');
            }
        }

        function saveChanges() {
            debugger;
            //logic to save changes or submit the form
            document.getElementById("AddBook").submit();
            //alert("Book details are saved");
            closeModal();            
        }

        function closeModal() {
            $('#exampleModalCenter').modal('hide');
            resetForm();
        }

        function resetForm() {
            var form = document.getElementById('AddBook');
            if (form) {
                form.reset();
            }
        }

        function getAndPopulateRateBookTypes() {
            $.ajax({
                url: '@Url.Content("~/WorkFlow/GetWorkflowDetails")',
                type: 'GET',
                cache: false,
                success: function (data) {
                    var dataObject = JSON.parse(data.data);
                    var RateBookTypesData = (dataObject.RatebookTypes);
                    var parentSuppliersData = (dataObject.ParentSuppliers);
                    var SourceManagerData = (dataObject.adUsers);
                    populateSourceManager(SourceManagerData);
                    populateParentSuppliers(parentSuppliersData);
                    populateSelectRateBookTypes(RateBookTypesData);
                },
                error: function (error) {
                    //console.error("Error fetching parent suppliers:", error);
                }
            });
        }

        function populateSelectRateBookTypes(RateBookTypesData) {
            var RateBookTypesDropdown = $('#SelectedRateBookType');
            RateBookTypesDropdown.empty();
            RateBookTypesDropdown.append('<option value="">Select Rate Book Type</option>');

            // Loop through the data received from the AJAX call and add options to the dropdown
            for (var i = 0; i < RateBookTypesData.length; i++) {
                var RateBookType = RateBookTypesData[i];
                RateBookTypesDropdown.append('<option value="' + RateBookType.RateTypeId + '">' + RateBookType.Name + '</option>');
            }
        }

    </script>
}